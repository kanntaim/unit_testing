package ngaleev;

import org.testng.Assert;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;
import org.testng.reporters.Files;

import java.io.File;
import java.io.IOException;
import java.io.PrintStream;

/**
 * Tests class Pen.
 */
public class PenTest extends Assert{
    private static final int PEN_DEFAULT_CONTAINER_VALUE = 1000;
    private static final double PEN_DEFAULT_SIZE_LETTER = 1.0;
    private static final String PEN_DEFAULT_COLOR = "BLUE";



    @DataProvider
    public Object[][] getColorData(){
        return new Object[][]{
                {"randomStringDenotingColor","randomStringDenotingColor"},
                {null,null}
        };
    }

    @Test(dataProvider = "getColorData")
    public void testPenGetColor(String color, String expected){
        Pen pen = new Pen(PEN_DEFAULT_CONTAINER_VALUE,PEN_DEFAULT_SIZE_LETTER, color);
        final String actual = pen.getColor();
        assertEquals(actual, expected);
    }

    @DataProvider
    public Object[][] isWorkData() {
        return new Object[][]{
                {PEN_DEFAULT_CONTAINER_VALUE, true},
                {0, false},
                {-1, false}
        };
    }


    @Test(dataProvider = "isWorkData")
    public void testIsWork(int container_value, boolean expected) {
        Pen pen = new Pen(container_value);
        final boolean actual = pen.isWork();
        assertEquals(actual, expected);
    }

    @DataProvider
    public  Object[][] writeData() {
        return new Object[][]{
                {PEN_DEFAULT_CONTAINER_VALUE, PEN_DEFAULT_SIZE_LETTER, "word_less_than_ink_container", "word_less_than_ink_container"},
                {10, 2.5, "word_more_then_inc_container","word"},
                {0, PEN_DEFAULT_SIZE_LETTER, "any_word", ""},
                {PEN_DEFAULT_CONTAINER_VALUE, 251, "word", "wor"},
                {PEN_DEFAULT_CONTAINER_VALUE, PEN_DEFAULT_SIZE_LETTER, null, null}
        };
    }

    @Test(dataProvider = "writeData")
    public void testWrite(int containerValue, double sizeLetter, String word, String expected){
        Pen pen = new Pen(containerValue, sizeLetter);
        final String actual = pen.write(word);
        assertEquals(actual, expected);
    }

    @DataProvider
    public Object[][] doSomethingElseData(){
        return new Object[][]{
                {"CYAN","CYAN"},
                {null,"null"}
        };
    }

    @Test(dataProvider = "doSomethingElseData")
    public void  testDoSomethingElse(String color, String expected){
        Pen pen = new Pen(PEN_DEFAULT_CONTAINER_VALUE,PEN_DEFAULT_SIZE_LETTER, color);
        File methodOutput;
        try{
            methodOutput = File.createTempFile("method", ".tmp");
            System.setOut(new PrintStream(methodOutput));

            pen.doSomethingElse();
            final String actual = Files.readFile(methodOutput).trim();
            methodOutput.deleteOnExit();
            assertEquals(actual, expected);
        }
        catch (IOException e){
            fail(e.toString());
        }

    }

    @DataProvider
    public Object[][] writeInkValueData(){
        return new Object[][]{
                {PEN_DEFAULT_CONTAINER_VALUE, PEN_DEFAULT_SIZE_LETTER, "word_less_than_ink_container", 1000-28},
                {10, 2.5, "word_more_then_ink_container", 0},
                {10, 3, "word_more_then_ink_container", 1},
                {0, PEN_DEFAULT_SIZE_LETTER, "any_word", 0},
                {PEN_DEFAULT_CONTAINER_VALUE, 251, "word", 247},
                {PEN_DEFAULT_CONTAINER_VALUE, PEN_DEFAULT_SIZE_LETTER, null, PEN_DEFAULT_CONTAINER_VALUE}
        };
    }

    /**
     * checks if inkContainerValue field is assigned properly in Pen.write() method
     */
    @Test(dataProvider = "writeInkValueData")
    public void testWriteInkValue(int containerValue, double sizeLetter, String word, int expected){
        Pen pen = new Pen(containerValue, sizeLetter);
        pen.write(word);
        int actual;
        try {
            actual = PenFields.getPenContainerValue(pen);
        } catch (IllegalAccessException | NoSuchFieldException e) {
            fail(e.toString());
            return;
        }
        assertEquals(actual,expected);
    }

    @DataProvider
    public Object[][] penThreeArgsData() {
        return new Object[][]{
                {PEN_DEFAULT_CONTAINER_VALUE,PEN_DEFAULT_SIZE_LETTER,PEN_DEFAULT_COLOR},
                {0,0,null}
        };
    }

    /*
     * Constructor test had been split to follow "1 test - 1 assert" and "Verify One Condition per Test" conventions
     */

    /**
     * checks if inkContainerValue field is assigned properly in three-argument constructor
     */
    @Test(dataProvider = "penThreeArgsData")
    public void testPenThreeArgsContainerValue(int containerValue, double sizeLetter, String color){
        Pen pen = new Pen(containerValue,sizeLetter,color);
        int actualContainerValue;
        try {
            actualContainerValue = PenFields.getPenContainerValue(pen);
        } catch (IllegalAccessException | NoSuchFieldException e) {
            fail(e.toString());
            return;
        }
        assertEquals(actualContainerValue, containerValue);
    }

    /**
     * checks if sizeLetter field is assigned properly in three-argument constructor
     */
    @Test(dataProvider = "penThreeArgsData")
    public void testPenThreeArgsSizeLetter(int containerValue, double sizeLetter, String color){
        Pen pen = new Pen(containerValue,sizeLetter,color);
        double actualSizeLetter;
        try {
            actualSizeLetter = PenFields.getPenSizeLetter(pen);
        } catch (IllegalAccessException | NoSuchFieldException e) {
            fail(e.toString());
            return;
        }
        assertEquals(actualSizeLetter, sizeLetter);
    }

    /**
     * checks if color field is assigned properly in three-argument constructor
     */
    @Test(dataProvider = "penThreeArgsData")
    public void testPenThreeArgsColor(int containerValue, double sizeLetter, String color){
        Pen pen = new Pen(containerValue,sizeLetter,color);
        String actualColor;
        try {
            actualColor = PenFields.getPenColor(pen);
        } catch (IllegalAccessException | NoSuchFieldException e) {
            fail(e.toString());
            return;
        }
        assertEquals(actualColor, color);
    }

    @DataProvider
    public Object[][] penTwoArgsData() {
        return new Object[][]{
                {0,0}
        };
    }

    /**
     * checks if containerValue field is assigned properly in two-argument constructor
     */
    @Test(dataProvider = "penTwoArgsData")
    public void testPenTwoArgsContainerValue(int containerValue, double sizeLetter){
        Pen pen = new Pen(containerValue,sizeLetter);
        int actualContainerValue;
        try {
            actualContainerValue = PenFields.getPenContainerValue(pen);
        } catch (IllegalAccessException | NoSuchFieldException e) {
            fail(e.toString());
            return;
        }
        assertEquals(actualContainerValue, containerValue);
    }

    /**
     * checks if sizeLetter field is assigned properly in two-argument constructor
     */
    @Test(dataProvider = "penTwoArgsData")
    public void testPenTwoArgsSizeLetter(int containerValue, double sizeLetter){
        Pen pen = new Pen(containerValue,sizeLetter);
        double actualSizeLetter;
        try {
            actualSizeLetter = PenFields.getPenSizeLetter(pen);
        } catch (IllegalAccessException | NoSuchFieldException e) {
            fail(e.toString());
            return;
        }
        assertEquals(actualSizeLetter, sizeLetter);
    }

    /**
     * checks if color field is assigned properly to default value in two-argument constructor
     */
    @Test(dataProvider = "penTwoArgsData")
    public void testPenTwoArgsColor(int containerValue, double sizeLetter){
        Pen pen = new Pen(containerValue,sizeLetter);
        String actualColor;
        try {
            actualColor = PenFields.getPenColor(pen);
        } catch (IllegalAccessException | NoSuchFieldException e) {
            fail(e.toString());
            return;
        }
        assertEquals(actualColor, PEN_DEFAULT_COLOR);
    }

    @DataProvider
    public Object[][] penOneArgData() {
        return new Object[][]{
                {0}
        };
    }

    /**
     * checks if containerValue field is assigned properly in one-argument constructor
     */
    @Test(dataProvider = "penOneArgData")
    public void testPenOneArgContainerValue(int containerValue){
        Pen pen = new Pen(containerValue);
        int actualContainerValue;
        try {
            actualContainerValue = PenFields.getPenContainerValue(pen);
        } catch (IllegalAccessException | NoSuchFieldException e) {
            fail(e.toString());
            return;
        }
        assertEquals(actualContainerValue, containerValue);
    }

    /**
     * checks if sizeLetter field is assigned properly to default value in one-argument constructor
     */
    @Test(dataProvider = "penOneArgData")
    public void testPenOneArgSizeLetter(int containerValue){
        Pen pen = new Pen(containerValue);
        double actualSizeLetter;
        try {
            actualSizeLetter = PenFields.getPenSizeLetter(pen);
        } catch (IllegalAccessException | NoSuchFieldException e) {
            fail(e.toString());
            return;
        }
        assertEquals(actualSizeLetter, PEN_DEFAULT_SIZE_LETTER);
    }

    /**
     * checks if color field is assigned properly to default value in one-argument constructor
     */
    @Test(dataProvider = "penOneArgData")
    public void testPenOneArgColor(int containerValue){
        Pen pen = new Pen(containerValue);
        String actualColor;
        try {
            actualColor = PenFields.getPenColor(pen);
        } catch (IllegalAccessException | NoSuchFieldException e) {
            fail(e.toString());
            return;
        }
        assertEquals(actualColor, PEN_DEFAULT_COLOR);
    }
    
}
